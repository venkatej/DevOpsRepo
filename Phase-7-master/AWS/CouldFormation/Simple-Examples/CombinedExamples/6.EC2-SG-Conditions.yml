AWSTemplateFormatVersion: "2010-09-09"

Description: Demo about conditions

Mappings: 
  RegionMap: 
    us-east-1: 
      AMI: "ami-0ac019f4fcb7cb7e6"
      TestAz: "us-east-1a"
    ap-south-1: 
      AMI: "ami-0d773a3b7bb2bb1c1"
      TestAz: "ap-south-1a"

Parameters: 
  myKeyPair: 
    Description: Amazon EC2 Key Pair
    Type: "AWS::EC2::KeyPair::KeyName"

  EC2InsType:
    Type: String
    Default: t2.micro
    AllowedValues: 
      - t2.micro
      - m1.small
      - m1.large
    Description: Enter t2.micro, m1.small, or m1.large. Default is t2.micro.

  ExistingSecurityGroup: 
    Description: An existing security group ID (optional).
    Default: NONE
    Type: String
    AllowedValues: 
      - default
      - NONE

Conditions:
  CreateNewSecurityGroup: !Equals [!Ref ExistingSecurityGroup, NONE]

Resources: 
  EC2Instance: 
    Type: "AWS::EC2::Instance"
    Properties: 
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      KeyName: !Ref myKeyPair
      InstanceType: !Ref EC2InsType
      SecurityGroups: 
        -
          !If [CreateNewSecurityGroup, !Ref NewSecurityGroup, !Ref ExistingSecurityGroup]
      UserData:
        Fn::Base64: !Sub | 
          #!/bin/bash
          sudo apt-get update -y && sudo apt-get install nginx -y

  NewSecurityGroup: 
    Type: "AWS::EC2::SecurityGroup"
    Condition: CreateNewSecurityGroup
    Properties: 
      GroupDescription: Enable HTTP access via port 80
      SecurityGroupIngress: 
        - 
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

Outputs: 
  SecurityGroupId:
    Description: Group ID of the security group used.
    Value: !If [CreateNewSecurityGroup, !Ref NewSecurityGroup, !Ref ExistingSecurityGroup]

  InstanceId:
    Description: instance id
    Condition: CreateNewSecurityGroup
    Value: !Ref NewSecurityGroup

  ReleaseNote:
    Description: This is your website URL which is running in nginx webserver.
    Value: !Join ["", [ "http://", !GetAtt EC2Instance.PublicIp, "/" ]]
    
