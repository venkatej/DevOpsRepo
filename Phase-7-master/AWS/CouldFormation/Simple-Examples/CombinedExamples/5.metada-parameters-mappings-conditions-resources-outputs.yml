AWSTemplateFormatVersion: "2010-09-09"
Description: A simple template to create 1 VPC, 3 subnets, 1 route table, 1 igw  and subnets - refering the stackname in this template file - metada, parameters, mappings, conditions, resources, outputs
# template metadata
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Network Configuration"
        Parameters:
          - vpcCIDR
          - SubnetIpBlocks
          - myKeyPair
          - EC2InsType
# Set of parameters
Parameters: 
  myKeyPair: 
    Description: Amazon EC2 Key Pair
    Type: "AWS::EC2::KeyPair::KeyName"

  EC2InsType:
    Type: String
    Default: t2.micro
    AllowedValues: 
      - t2.micro
      - m1.small
      - m1.large
    Description: Enter t2.micro, m1.small, or m1.large. Default is t2.micro.

  vpcCIDR:
    Type: String
    Default: 10.1.0.0/16
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.

  SubnetIpBlocks: 
    Description: "Comma-delimited list of three CIDR blocks"
    Type: CommaDelimitedList
    Default: "10.1.1.0/28, 10.1.2.0/28, 10.1.3.0/28"

# set of mappings for ami based on the region
Mappings: 
  RegionMap: 
    us-east-1:
      RHEL: ami-011b3ccf1bd6db744
      Ubuntu: ami-0ac019f4fcb7cb7e6
    ap-south-1:
      RHEL: ami-5b673c34
      Ubuntu: ami-0d773a3b7bb2bb1c1

Conditions:
  Has2Azs:
    Fn::Or:
      - Fn::Equals:
        - {Ref: 'AWS::Region'}
        - ap-south-1
      - Fn::Equals:
        - {Ref: 'AWS::Region'}
        - us-east-1

  HasMoreThan2Azs:
    Fn::Not:
      - Condition: Has2Azs

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties: 
       CidrBlock: !Ref vpcCIDR
       EnableDnsSupport: true
       EnableDnsHostnames: true
       Tags:
       - Key: Name
         Value: !Sub "${AWS::StackName}-MyVPC"
        
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    
  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref MyVPC
      
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-Public Subnets"
      - Key: Network
        Value: Public
        
  Route:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  Subnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 01
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock: !Select [0, !Ref SubnetIpBlocks]
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: MyVPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-Subnet01"

  Subnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 02
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock: !Select [1, !Ref SubnetIpBlocks]
      VpcId:
        Ref: MyVPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-Subnet02"
      
  Subnet03:
    Condition: HasMoreThan2Azs
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 03
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '2'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock: !Select [2, !Ref SubnetIpBlocks]
      VpcId:
        Ref: MyVPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-Subnet03"

  Subnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet01
      RouteTableId: !Ref RouteTable

  Subnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet02
      RouteTableId: !Ref RouteTable

  Subnet03RouteTableAssociation:
    Condition: HasMoreThan2Azs
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet03
      RouteTableId: !Ref RouteTable

  MySG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-SampleSG"
      GroupDescription: VPC specific SG
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 10.1.0.0/28
          FromPort: '443'
          ToPort: '443'
        - IpProtocol: tcp
          CidrIp: 10.1.2.0/28
          FromPort: '80'
          ToPort: '80'
      SecurityGroupEgress:
        - IpProtocol: tcp
          CidrIp: 10.1.0.0/28
          FromPort: '443'
          ToPort: '443'
        - IpProtocol: tcp
          CidrIp: 10.1.0.0/28
          FromPort: '80'
          ToPort: '80'

  pubnetworkIn:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref Subnet01
      Description: public network for public instance
      GroupSet: 
      - !Ref MySG
      SourceDestCheck: true
      Tags:
        -
          Key: Network
          Value: Web

  MyEC2Instance:
    Type: "AWS::EC2::Instance"
    Properties: 
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", Ubuntu]
      InstanceType: !Ref EC2InsType
      KeyName: !Ref myKeyPair
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-Pub Instance"
      NetworkInterfaces:
        -
          NetworkInterfaceId: !Ref pubnetworkIn
          DeviceIndex: 0
      BlockDeviceMappings:
        -
          DeviceName: /dev/xvda
          Ebs:
            VolumeType: io1
            Iops: 200
            DeleteOnTermination: true
            VolumeSize: 10

Outputs:

  VpcId:
    Description: The VPC Id
    Value: !Ref MyVPC

  #SubnetIds:
  #  Description: All subnet ids
    # Value: !Join [ ",", [ !Ref Subnet01, !Ref Subnet02, !Ref Subnet03 ] ]

  SecurityGroups:
    Description: Security group
    Value: !Ref MySG
    
  InstanceID:
    Description: Instance ID
    Value: !Ref MyEC2Instance
